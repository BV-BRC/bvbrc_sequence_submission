#!/usr/bin/env perl

use strict;

use File::Basename;
my $SCRIPT = basename($0);

# #########################################################################
#
#    Usage Declaration
#
# #########################################################################
my $USAGE = qq~
USAGE: $SCRIPT [options]
~;

#

# #########################################################################
#
#    Version Strings
#
# #########################################################################
my $VERSION = "0.90";
my $BUILD = (qw/$Revision: 729 $/ )[1];

# #########################################################################
#
#    Load Modules
#
# #########################################################################

#
#  Use Local Modules First
#
use FindBin qw($Bin);
use lib "$Bin";
use lib "$Bin/../perllib";

#
#  Standard USE statments
#
use Getopt::Long;
use Term::ReadKey; #For passwords
use IO::Handle;

#
#  Load JavaRunner
#
use Java::Runner;

# #########################################################################
#
#    Subroutine Declarations
#
# #########################################################################

sub getPassword(;$);

# #########################################################################
#
#    Global Variables
#
# #########################################################################

my %overrides = ();

#
#  Option Variables
# 

# Meta-Options
my $show_help = undef;
my $show_version = undef;
my $show_usage = undef;

# Devel Options
my $cmd_check = undef;
my $do_devel = undef;

#
#  Ouput Variables
#
my $be_verbose = undef;

# #########################################################################
#
#    Command Line Option Parsing
#
# #########################################################################


# #########################################################################
#
#    Set up the JavaRunner
#
# #########################################################################

my $runner = Java::Runner->new();

$runner->useJavaPreset("8");

$runner->clearClassPath();

$runner->initialHeapSize(80);
$runner->maxHeapSize(256);

if ($do_devel)
{
    $runner->addClassLocation("$Bin/../bin");
}


$runner->addClassLocation("$Bin/../resources");
$runner->addJarDirectory("$Bin/../lib/log4j");
$runner->addJarDirectory("$Bin/../lib/glklib");
$runner->addJarDirectory("$Bin/../lib/jlims");
$runner->addJarDirectory("$Bin/../lib/platetools");
$runner->addJarDirectory("$Bin/../lib/hibernate");
$runner->addJarDirectory("$Bin/../lib/jillion");
$runner->addJarDirectory("$Bin/../lib/elvirautilities");
$runner->addJarDirectory("$Bin/../lib/euid");
$runner->addJarDirectory("$Bin/../lib/jdbc");
$runner->addJarDirectory("$Bin/../lib/jodatime");
$runner->addJarDirectory("$Bin/../lib/apache-poi");
$runner->addJarDirectory("$Bin/../lib/apache-commons");

$runner->mainClass("org.jcvi.elvira.application.sanger.plate.PlateCleanerWrapper");

#
#  Apply user overrides
#
for my $property (sort keys %overrides)
{
    my $value = $overrides{$property};
    
    $runner->setProperty($property, $value);
}

#
#  Add file targets
#
while(my $file = shift)
{
    $runner->addParameters($file);
}

# #########################################################################
#
#    Kick off the JavaRunner
#
# #########################################################################

if ($cmd_check) { printf("CMD> %s\n", $runner->getCommandLine()); }
else
{
    $runner->execute();
}
